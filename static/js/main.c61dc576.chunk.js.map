{"version":3,"sources":["Header/index.jsx","Board/index.jsx","Legend/index.jsx","App.js","index.js"],"names":["Header","className","tasksList","_id","title","status","color","text","labelsMap","Board","useState","tasks","setTaskStatus","currentItem","setCurrentItem","React","open","setOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClickOpen","item","changeTaskStatus","useCallback","id","task","find","taskIndex","indexOf","newTasks","update","$set","DndProvider","backend","HTML5Backend","filter","map","onClick","Dialog","onClose","aria-labelledby","DialogContent","DialogContentText","KanbanColumn","children","ref","useRef","useDrop","accept","drop","KanbanItem","useDrag","type","collect","monitor","isDragging","opacity","drag","style","Legend","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c61dc576.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={'header'}>\r\n            <div className={'header__heading'}>\r\n                <h2>Kanban Board Example</h2>\r\n            </div>\r\n            <div className={'header__info'}>\r\n                <div className={'header__info_author'}>\r\n                    Romanov V\r\n                </div>\r\n                <div className={'header__info_date'}>\r\n                    September 06, 2021\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useState, useCallback, useRef} from \"react\";\r\nimport {DndProvider, useDrag, useDrop} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport update from \"immutability-helper\";\r\nimport './board.css'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {useTheme} from '@material-ui/core/styles';\r\n\r\nconst tasksList = [\r\n    {_id: 1, title: \"First Task\", status: \"plan\", color: \"urgent\", text: \"Additional Information\"},\r\n    {_id: 2, title: \"Second Task\", status: \"plan\", color: \"bug-fix\", text: \"Additional Information\"},\r\n    {_id: 3, title: \"Third Task\", status: \"plan\", color: \"urgent\", text: \"Additional Information\"},\r\n    {_id: 4, title: \"Fourth Task\", status: \"toDo\", color: \"features\", text: \"Additional Information\"},\r\n    {_id: 5, title: \"Fifth Task\", status: \"toDo\", color: \"urgent\", text: \"Additional Information\"},\r\n    {_id: 6, title: \"Sixth Task\", status: \"code\", color: \"bug-fix\", text: \"Additional Information\"},\r\n    {_id: 7, title: \"Seventh Task\", status: \"test\", color: \"urgent\", text: \"Additional Information\"},\r\n    {_id: 8, title: \"Eighth Task\", status: \"create\", color: \"features\", text: \"Additional Information\"},\r\n];\r\n\r\nconst labelsMap = {\r\n    toDo: \"To Do\",\r\n    plan: \"Plan\",\r\n    code: \"Code\",\r\n    create: \"Create\",\r\n    test: \"Test\",\r\n    done: \"Done\"\r\n};\r\n\r\nconst Board = () => {\r\n    const [tasks, setTaskStatus] = useState(tasksList);\r\n    const [currentItem, setCurrentItem] = useState(null)\r\n    const [open, setOpen] = React.useState(false);\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const handleClickOpen = (item) => {\r\n        setOpen(true);\r\n        setCurrentItem(item)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    const changeTaskStatus = useCallback(\r\n        (id, status) => {\r\n            let task = tasks.find(task => task._id === id);\r\n            const taskIndex = tasks.indexOf(task);\r\n            task = {...task, status};\r\n            let newTasks = update(tasks, {\r\n                [taskIndex]: {$set: task}\r\n            });\r\n            setTaskStatus(newTasks);\r\n        },\r\n        [tasks]\r\n    );\r\n\r\n    return (\r\n        <main>\r\n            <DndProvider backend={HTML5Backend}>\r\n                <section className={\"board\"}>\r\n                    <KanbanColumn\r\n                        key={\"toDo\"}\r\n                        status={\"toDo\"}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                    >\r\n                        <div className={\"board__column\"}>\r\n                            <div className={\"board__column__columnHead_toDo\"}>{labelsMap[\"toDo\"]}</div>\r\n                            <div className={\"board__column__content\"}>\r\n                                {tasks\r\n                                    .filter(item => item.status === \"toDo\")\r\n                                    .map(item => (\r\n                                        <KanbanItem key={item._id} id={item._id}>\r\n                                            <div onClick={() => handleClickOpen(item.title)}\r\n                                                 className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                        </KanbanItem>\r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </KanbanColumn>\r\n                    <div className={\"board__column_progress\"}>\r\n                        <div className={\"board__column_progress_progress\"}>In progress</div>\r\n                        <div className={\"board__column_progress_list\"}>\r\n                            <KanbanColumn\r\n                                key={\"plan\"}\r\n                                status={\"plan\"}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                            >\r\n                                <div className={\"board__column\"}>\r\n                                    <div className={\"board__column__columnHead_plan\"}>{labelsMap[\"plan\"]}</div>\r\n                                    <div className={\"board__column__content\"}>\r\n                                        {tasks\r\n                                            .filter(item => item.status === \"plan\")\r\n                                            .map(item => (\r\n                                                <KanbanItem key={item._id} id={item._id}>\r\n                                                    <div onClick={() => handleClickOpen(item.title)}\r\n                                                        className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                                </KanbanItem>\r\n                                            ))}\r\n                                    </div>\r\n                                </div>\r\n                            </KanbanColumn>\r\n                            <KanbanColumn\r\n                                key={\"code\"}\r\n                                status={\"code\"}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                            >\r\n                                <div className={\"board__column\"}>\r\n                                    <div className={\"board__column__columnHead_code\"}>{labelsMap[\"code\"]}</div>\r\n                                    <div className={\"board__column__content\"}>\r\n                                        {tasks\r\n                                            .filter(item => item.status === \"code\")\r\n                                            .map(item => (\r\n                                                <KanbanItem key={item._id} id={item._id}>\r\n                                                    <div onClick={() => handleClickOpen(item.title)}\r\n                                                        className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                                </KanbanItem>\r\n                                            ))}\r\n                                    </div>\r\n                                </div>\r\n                            </KanbanColumn>\r\n                            <KanbanColumn\r\n                                key={\"create\"}\r\n                                status={\"create\"}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                            >\r\n                                <div className={\"board__column\"}>\r\n                                    <div className={\"board__column__columnHead_create\"}>{labelsMap[\"create\"]}</div>\r\n                                    <div className={\"board__column__content\"}>\r\n                                        {tasks\r\n                                            .filter(item => item.status === \"create\")\r\n                                            .map(item => (\r\n                                                <KanbanItem key={item._id} id={item._id}>\r\n                                                    <div onClick={() => handleClickOpen(item.title)}\r\n                                                        className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                                </KanbanItem>\r\n                                            ))}\r\n                                    </div>\r\n                                </div>\r\n                            </KanbanColumn>\r\n                            <KanbanColumn\r\n                                key={\"test\"}\r\n                                status={\"test\"}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                            >\r\n                                <div className={\"board__column\"}>\r\n                                    <div className={\"board__column__columnHead_test\"}>{labelsMap[\"test\"]}</div>\r\n                                    <div className={\"board__column__content\"}>\r\n                                        {tasks\r\n                                            .filter(item => item.status === \"test\")\r\n                                            .map(item => (\r\n                                                <KanbanItem key={item._id} id={item._id}>\r\n                                                    <div onClick={() => handleClickOpen(item.title)}\r\n                                                        className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                                </KanbanItem>\r\n                                            ))}\r\n                                    </div>\r\n                                </div>\r\n                            </KanbanColumn>\r\n                        </div>\r\n                    </div>\r\n                    <KanbanColumn\r\n                        key={\"done\"}\r\n                        status={\"done\"}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                    >\r\n                        <div className={\"board__column\"}>\r\n                            <div className={\"board__column__columnHead_done\"}>{labelsMap[\"done\"]}</div>\r\n                            <div className={\"board__column__content\"}>\r\n                                {tasks\r\n                                    .filter(item => item.status === \"done\")\r\n                                    .map(item => (\r\n                                        <KanbanItem key={item._id} id={item._id}>\r\n                                            <div onClick={() => handleClickOpen(item.title)}\r\n                                                className={`board__column__columnHead__item board__column__columnHead__item_${item.color}`}>{item.title}</div>\r\n                                        </KanbanItem>\r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </KanbanColumn>\r\n                </section>\r\n            </DndProvider>\r\n            {open && (\r\n                <div>\r\n                    <Dialog\r\n                        fullScreen={fullScreen}\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"responsive-dialog-title\"\r\n                    >\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Additional information for {currentItem}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </div>\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n\r\nconst KanbanColumn = ({status, changeTaskStatus, children}) => {\r\n    const ref = useRef(null);\r\n    const [, drop] = useDrop({\r\n        accept: \"card\",\r\n        drop(item) {\r\n            changeTaskStatus(item.id, status);\r\n        }\r\n    });\r\n    drop(ref);\r\n    return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nconst KanbanItem = ({id, children}) => {\r\n    const ref = useRef(null);\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: \"card\", id},\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    drag(ref);\r\n    return (\r\n        <div ref={ref} style={{opacity}}>\r\n            {children}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport './legend.css'\r\n\r\nconst Legend = () => {\r\n    return (\r\n        <section className={\"legend\"}>\r\n            <p>Legend</p>\r\n            <div className={\"legend__list\"}>\r\n                <div className={\"legend__list__item legend__list__item_urgent\"}>= Urgent</div>\r\n                <div className={\"legend__list__item legend__list__item_bug-fix\"}>= Bug fix</div>\r\n                <div className={\"legend__list__item legend__list__item_features\"}>= Features</div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default Legend","import './App.css';\nimport Header from './Header'\nimport Board from './Board'\nimport Legend from './Legend'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Board/>\n      <Legend/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}